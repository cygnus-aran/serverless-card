import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import groovy.json.JsonSlurper;

node {
    def projectName =  determineRepoName()
    def projectGit = "Kushki/${projectName}"
    def ENVIRONMENT = ""
    def PULL_REQUEST = env.BUILD_ID
    def CHANGE_BRANCH = env.BRANCH_NAME
    def CHANGE_TARGET = ("${env.BRANCH_NAME}".contains("release")||"${env.BRANCH_NAME}".contains("hotfix")) ? "master" : "release";
    def SSM_PREFIX = ""

    sh "echo ${projectName} - ${projectGit}"
       if ("${CHANGE_TARGET}".contains("release")) {
            ENVIRONMENT = "ci"
        }
        if ("${CHANGE_TARGET}".contains("master")) {
            ENVIRONMENT = "qa"
        }
        SSM_PREFIX = "/${ENVIRONMENT}/${projectName}"

        stage('Pull') {
             sh 'printenv'

             git branch: "${BRANCH_NAME}", credentialsId: 'BitBucket', url: "https://bitbucket.com/${projectGit}"
             commit_id = sh(returnStdout: true, script: "git rev-parse HEAD").trim()
             GIT_AUTHOR_EMAIL = sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%ae'").trim()
        }
        stage('Build') {
          parallel(
          createCIArtifact:{
          if ("${CHANGE_TARGET}".contains("release")) {
          awsCodeBuild artifactLocationOverride: 'artifact-build-des', artifactNameOverride: "${commit_id}.zip", artifactNamespaceOverride: "NONE", artifactPackagingOverride: 'ZIP', artifactPathOverride: "ci/${projectName}/PR${PULL_REQUEST}/", artifactTypeOverride: 'S3',  buildSpecFile: '', buildTimeoutOverride: '45', credentialsId: 'AWSCodeBuildDes', credentialsType: 'jenkins',  envVariables: "[ { USRV_STAGE, ci }, {USRV_COMMIT, $commit_id}, {USRV_BRANCH,$CHANGE_BRANCH} ]", gitCloneDepthOverride: '', projectName: 'usrv_back_build', proxyHost: '', proxyPort: '', region: 'us-east-1', sourceControlType: 'jenkins', sourceVersion: '', sseAlgorithm: 'AES256'
          }},
          createSTGArtifact:{
          if ("${CHANGE_TARGET}".contains("master")) {
          awsCodeBuild artifactLocationOverride: 'artifact-build-des', artifactNameOverride: "${commit_id}.zip", artifactNamespaceOverride: "NONE", artifactPackagingOverride: 'ZIP', artifactPathOverride: "stg/${projectName}/PR${PULL_REQUEST}/", artifactTypeOverride: 'S3',   buildSpecFile: '', buildTimeoutOverride: '45', credentialsId: 'AWSCodeBuildDes', credentialsType: 'jenkins',  envVariables: "[ { USRV_STAGE, stg }, {USRV_COMMIT, $commit_id}, {USRV_BRANCH,$CHANGE_BRANCH} ]", gitCloneDepthOverride: '', projectName: 'usrv_back_build', proxyHost: '', proxyPort: '', region: 'us-east-1', sourceControlType: 'jenkins', sourceVersion: '', sseAlgorithm: 'AES256'
          }
          },
          createQAArtifact:{
          if ("${CHANGE_TARGET}".contains("master")) {
          awsCodeBuild artifactLocationOverride: 'artifact-build-des', artifactNameOverride: "${commit_id}.zip", artifactNamespaceOverride: "NONE", artifactPackagingOverride: 'ZIP', artifactPathOverride: "qa/${projectName}/PR${PULL_REQUEST}/", artifactTypeOverride: 'S3',   buildSpecFile: '', buildTimeoutOverride: '45', credentialsId: 'AWSCodeBuildDes', credentialsType: 'jenkins',  envVariables: "[ { USRV_STAGE, qa }, {USRV_COMMIT, $commit_id}, {USRV_BRANCH,$CHANGE_BRANCH} ]", gitCloneDepthOverride: '', projectName: 'usrv_back_build', proxyHost: '', proxyPort: '', region: 'us-east-1', sourceControlType: 'jenkins', sourceVersion: '', sseAlgorithm: 'AES256'
            }
          },
          testingCode:{
          awsCodeBuild artifactLocationOverride: '', artifactNameOverride: "", artifactNamespaceOverride: "", artifactPackagingOverride: '', artifactPathOverride: "",  artifactTypeOverride: 'NO_ARTIFACTS', buildSpecFile: '', buildTimeoutOverride: '45', credentialsId: 'AWSCodeBuildDes', credentialsType: 'jenkins', envParameters: '', envVariables: "[ {GIT_COMMIT_SHA, $commit_id}, {GIT_BRANCH,$CHANGE_BRANCH}, {SSM_PREFIX,$SSM_PREFIX} ]", gitCloneDepthOverride: '', projectName: 'usrv_back_testing', proxyHost: '', proxyPort: '', region: 'us-east-1', sourceControlType: 'jenkins', sourceVersion: '', sseAlgorithm: 'AES256'
          },
          /*sonarQube:{
          awsCodeBuild artifactLocationOverride: '', artifactNameOverride: "", artifactNamespaceOverride: "", artifactPackagingOverride: '', artifactPathOverride: "", artifactTypeOverride: '',  buildSpecFile: '', buildTimeoutOverride: '45', credentialsId: 'AWSCodeBuildDes', credentialsType: 'jenkins',  envVariables: "[  {USRV_COMMIT, $commit_id}, {USRV_BRANCH,$CHANGE_BRANCH},{PROJECT_NAME,$projectName},{PULL_REQUEST,$PULL_REQUEST},{GITHUB_SONAR_TOKEN,731e9b00-9b7d-4d1d-9d78-b27b7d0cf2a6}]", gitCloneDepthOverride: '', projectName: 'sonarqube', proxyHost: '', proxyPort: '', region: 'us-east-1', sourceControlType: 'jenkins', sourceVersion: '', sseAlgorithm: 'AES256'
          }*/
          )
        }

        stage ("deploy $ENVIRONMENT") {
        awsCodeBuild artifactLocationOverride: '', artifactNameOverride: '', artifactNamespaceOverride: '', artifactPackagingOverride: '', artifactPathOverride: '', artifactTypeOverride: 'NO_ARTIFACTS', buildSpecFile: '', buildTimeoutOverride: '30', credentialsId: 'AWSCodeBuildDes', credentialsType: 'jenkins', envParameters: '', envVariables: "[{ USRV_STAGE, $ENVIRONMENT }, {USRV_COMMIT, $commit_id}, {USRV_BRANCH,$CHANGE_BRANCH}, { ARTIFACT, s3://artifact-build-des/$ENVIRONMENT/${projectName}/PR${PULL_REQUEST}/${commit_id}.zip }]", gitCloneDepthOverride: '', projectName: 'usrv_back_deploy', proxyHost: '', proxyPort: '', region: 'us-east-1', sourceControlType: 'project', sourceVersion: '', sseAlgorithm: 'AES256'
        }
        notifyRollbar(ENVIRONMENT,projectName, commit_id, GIT_AUTHOR_EMAIL)
        stage('Integration') {
        functionalTests(ENVIRONMENT,projectName)
        }
        if ("${CHANGE_TARGET}".contains("master")) {
         ENVIRONMENT = "stg"
           stage ("deploy $ENVIRONMENT") {
           awsCodeBuild artifactLocationOverride: '', artifactNameOverride: '', artifactNamespaceOverride: '', artifactPackagingOverride: '', artifactPathOverride: '', artifactTypeOverride: 'NO_ARTIFACTS', buildSpecFile: '', buildTimeoutOverride: '30', credentialsId: 'AWSCodeBuildDes', credentialsType: 'jenkins', envParameters: '', envVariables: "[{ USRV_STAGE, $ENVIRONMENT }, {USRV_COMMIT, $commit_id}, {USRV_BRANCH,$CHANGE_BRANCH}, { ARTIFACT, s3://artifact-build-des/$ENVIRONMENT/${projectName}/PR${PULL_REQUEST}/${commit_id}.zip }]", gitCloneDepthOverride: '', projectName: 'usrv_back_deploy', proxyHost: '', proxyPort: '', region: 'us-east-1', sourceControlType: 'project', sourceVersion: '', sseAlgorithm: 'AES256'

           notifyRollbar(ENVIRONMENT,projectName, commit_id, GIT_AUTHOR_EMAIL)
        }

    }
    }


String determineRepoName() {
    return "${env.JOB_NAME}".tokenize('/')[1]
}

def functionalTests(String environment, String projectName) {
   timeout(time: 900 , unit: 'SECONDS') {
   withAWSParameterStore(credentialsId: 'AWSCredDes', naming: 'basename', path: "/${environment}/${projectName}/", recursive: true, regionName: 'us-east-1') {
   echo "${RUNSCOPE_SUITE_TEST}"
                 hook = registerWebhook()
                 def wurl = "https://api.runscope.com/radar/${RUNSCOPE_SUITE_TEST}/trigger"
                 sh """
                     curl -X POST ${wurl} \
                     -d runscope_environment=${RUNSCOPE_ENV} \
                     -d runscope_notification_url=${hook.getURL()}
                 """
             def dataAsstring = waitForWebhook hook
             def props = readJSON text: dataAsstring.substring(0,dataAsstring.indexOf("test_run_id")-1) + "}"
             echo "Review : ${props.test_run_url}"
             assert (props.result == "pass") : "Runscope fail! ???_???. better luck next time"
             echo "Hi :) : everything is ok"
             def response = sh(script: "curl -X GET 'https://api.rollbar.com/api/1/items?access_token=$ROLLBAR_TOKEN&environment=${environment}&level=error&level=critical&status=active'", returnStdout: true)
             print response
             def propsRollbar = readJSON text: response , returnPojo: true
             assert (propsRollbar.result.total_count == 1) : "RollbarCheck fail"
        }
    }
}

def notifyRollbar(String environment, String projectName, String commit_id, String GIT_AUTHOR_EMAIL ){
echo "/${environment}/${projectName}/"
withAWSParameterStore(credentialsId: 'AWSCredDes', naming: 'basename', path: "/${environment}/${projectName}/", recursive: true, regionName: 'us-east-1') {
             stage('Notify Rollbar') {
                sh """
                    curl --fail -X POST https://api.rollbar.com/api/1/deploy/ \
                        -F access_token=$ROLLBAR_TOKEN \
                        -F environment=$environment \
                        -F revision=$commit_id \
                        -F local_username=$GIT_AUTHOR_EMAIL
                """
        }
}

}
