import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import groovy.json.JsonSlurper;

node {
    def projectName =  determineRepoName()
    projectGit = "Kushki/${projectName}"
    def ENVIRONMENT = "uat"
    def PULL_REQUEST = env.BUILD_ID
    def CHANGE_BRANCH = "master"
    def SSM_PREFIX = "/${ENVIRONMENT}/${projectName}"
    sh "echo ${projectName} - ${projectGit}"

    stage('Pull') {
        git branch: "${BRANCH_NAME}", credentialsId: 'BitBucket', url: "https://bitbucket.com/${projectGit}"
        commit_id = sh(returnStdout: true, script: "git rev-parse HEAD").trim()
        GIT_AUTHOR_EMAIL = sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%ae'").trim()
    }

    stage('Test and build') {
        parallel(
            createUATArtifact:{
                def localEnvironment = 'uat'
                awsCodeBuild artifactLocationOverride: 'artifact-build-des', artifactNameOverride: "${commit_id}.zip", artifactNamespaceOverride: "NONE", artifactPackagingOverride: 'ZIP', artifactPathOverride: "$localEnvironment/${projectName}/", artifactTypeOverride: 'S3',  buildSpecFile: '', buildTimeoutOverride: '90', credentialsId: 'AWSCodeBuildDes', credentialsType: 'jenkins',  envVariables: "[ { USRV_STAGE, $localEnvironment }, {USRV_COMMIT, $commit_id}, {USRV_BRANCH,$CHANGE_BRANCH} ]", gitCloneDepthOverride: '', projectName: 'usrv_back_build', proxyHost: '', proxyPort: '', region: 'us-east-1', sourceControlType: 'jenkins', sourceVersion: '', sseAlgorithm: 'AES256'
            },
            createPrimaryArtifact:{
                def localEnvironment = 'primary'
                awsCodeBuild artifactLocationOverride: 'artifact-build', artifactNameOverride: "${commit_id}.zip", artifactNamespaceOverride: "NONE", artifactPackagingOverride: 'ZIP', artifactPathOverride: "$localEnvironment/${projectName}/", artifactTypeOverride: 'S3',  buildSpecFile: '', buildTimeoutOverride: '90', credentialsId: 'AWSCodebuildProd', credentialsType: 'jenkins',  envVariables: "[ { USRV_STAGE, $localEnvironment }, {USRV_COMMIT, $commit_id}, {USRV_BRANCH,$CHANGE_BRANCH} ]", gitCloneDepthOverride: '', projectName: 'usrv_back_build', proxyHost: '', proxyPort: '', region: 'us-east-1', sourceControlType: 'jenkins', sourceVersion: '', sseAlgorithm: 'AES256'
            },
            testingCode:{
                try {
                    awsCodeBuild artifactLocationOverride: 'artifact-build-des', artifactNameOverride: "${commit_id}.zip", artifactNamespaceOverride: "NONE", artifactPackagingOverride: 'ZIP', artifactPathOverride: "coverage/${projectName}/",  artifactTypeOverride: 'S3', buildSpecFile: '', buildTimeoutOverride: '90', credentialsId: 'AWSCodeBuildDes', credentialsType: 'jenkins', envParameters: '', envVariables: "[ {GIT_COMMIT_SHA, $commit_id}, {GIT_BRANCH,$CHANGE_BRANCH}, {SSM_PREFIX,$SSM_PREFIX} ]", gitCloneDepthOverride: '', projectName: 'usrv_back_testing', proxyHost: '', proxyPort: '', region: 'us-east-1', sourceControlType: 'jenkins', sourceVersion: '', sseAlgorithm: 'AES256'
                } catch(Exception ex) {
                    currentBuild.result = 'FAILED'
                    error('testing code fail')
                }
            },
            /*sonarQube:{
                awsCodeBuild artifactLocationOverride: '', artifactNameOverride: "", artifactNamespaceOverride: "", artifactPackagingOverride: '', artifactPathOverride: "", artifactTypeOverride: '',  buildSpecFile: '', buildTimeoutOverride: '45', credentialsId: 'AWSCodeBuildDes', credentialsType: 'jenkins',  envVariables: "[  {USRV_COMMIT, $commit_id}, {USRV_BRANCH,$CHANGE_BRANCH},{PROJECT_NAME,$projectName},{PULL_REQUEST,$PULL_REQUEST},{GITHUB_SONAR_TOKEN,731e9b00-9b7d-4d1d-9d78-b27b7d0cf2a6}]", gitCloneDepthOverride: '', projectName: 'sonarqube', proxyHost: '', proxyPort: '', region: 'us-east-1', sourceControlType: 'jenkins', sourceVersion: '', sseAlgorithm: 'AES256'
            }*/
        )
    }

    stage ("deploy $ENVIRONMENT") {
        ENVIRONMENT = 'uat'
        awsCodeBuild artifactLocationOverride: '', artifactNameOverride: '', artifactNamespaceOverride: '', artifactPackagingOverride: '', artifactPathOverride: '', artifactTypeOverride: 'NO_ARTIFACTS', buildSpecFile: '', buildTimeoutOverride: '90', credentialsId: 'AWSCodeBuildDes', credentialsType: 'jenkins', envParameters: '', envVariables: "[{ USRV_STAGE, $ENVIRONMENT }, {USRV_COMMIT, $commit_id}, {USRV_BRANCH,$CHANGE_BRANCH}, { ARTIFACT, s3://artifact-build-des/$ENVIRONMENT/${projectName}/${commit_id}.zip }]", gitCloneDepthOverride: '', projectName: 'usrv_back_deploy', proxyHost: '', proxyPort: '', region: 'us-east-1', sourceControlType: 'project', sourceVersion: '', sseAlgorithm: 'AES256'
    }

    notifyRollbar(ENVIRONMENT,projectName, commit_id, GIT_AUTHOR_EMAIL,'AWSCredDes' )

    stage('Integration') {
        functionalTests(ENVIRONMENT,projectName)
    }

    ENVIRONMENT = 'primary'

    stage ("deploy $ENVIRONMENT") {
        awsCodeBuild artifactLocationOverride: '', artifactNameOverride: '', artifactNamespaceOverride: '', artifactPackagingOverride: '', artifactPathOverride: '', artifactTypeOverride: 'NO_ARTIFACTS', buildSpecFile: '', buildTimeoutOverride: '90', credentialsId: 'AWSCodebuildProd', credentialsType: 'jenkins', envParameters: '', envVariables: "[{ USRV_STAGE, $ENVIRONMENT }, {USRV_COMMIT, $commit_id}, {USRV_BRANCH,$CHANGE_BRANCH}, { ARTIFACT, s3://artifact-build/$ENVIRONMENT/${projectName}/${commit_id}.zip }]", gitCloneDepthOverride: '', projectName: 'usrv_back_deploy', proxyHost: '', proxyPort: '', region: 'us-east-1', sourceControlType: 'project', sourceVersion: '', sseAlgorithm: 'AES256'
    }

    notifyRollbar(ENVIRONMENT,projectName, commit_id, GIT_AUTHOR_EMAIL,'AWSCredProd')
}

String determineRepoName() {
    return "${env.JOB_NAME}".tokenize('/')[1]
}

def functionalTests(String environment, String projectName) {
    timeout(time: 1000 , unit: 'SECONDS') {
        withAWSParameterStore(credentialsId: 'AWSCredDes', naming: 'basename', path: "/${environment}/${projectName}/", recursive: true, regionName: 'us-east-1') {
            echo "${RUNSCOPE_SUITE_TEST}"
            hook = registerWebhook()
            def wurl = "https://api.runscope.com/radar/${RUNSCOPE_SUITE_TEST}/trigger"
            sh """
                 curl -X POST ${wurl} \
                 -d runscope_environment=${RUNSCOPE_ENV} \
                 -d runscope_notification_url=${hook.getURL()}
            """
            def dataAsstring = waitForWebhook hook
            def props = readJSON text: dataAsstring.substring(0,dataAsstring.indexOf("test_run_id")-1) + "}"
            echo "Review : ${props.test_run_url}"
            assert (props.result == "pass") : "Runscope fail! ???_???. better luck next time"
            echo "Hi :) : everything is ok"
            def response = sh(script: "curl -X GET 'https://api.rollbar.com/api/1/items?access_token=$ROLLBAR_TOKEN&environment=${environment}&level=error&level=critical&status=active'", returnStdout: true)
            print response
            def propsRollbar = readJSON text: response , returnPojo: true
            assert (propsRollbar.result.total_count == 0) : "RollbarCheck fail"
        }
    }
}

def notifyRollbar(String environment, String projectName, String commit_id, String GIT_AUTHOR_EMAIL, String credential_id ){
    withAWSParameterStore(credentialsId: "${credential_id}", naming: 'basename', path: "/${environment}/${projectName}/", recursive: true, regionName: 'us-east-1') {
        stage('Notify Rollbar') {
            sh """
               curl --fail -X POST https://api.rollbar.com/api/1/deploy/ \
                   -F access_token=$ROLLBAR_TOKEN \
                   -F environment=$environment \
                   -F revision=$commit_id \
                   -F local_username=$GIT_AUTHOR_EMAIL
            """
        }
    }
}
